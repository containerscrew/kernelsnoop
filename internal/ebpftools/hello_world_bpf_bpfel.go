// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package ebpftools

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadHello_world_bpf returns the embedded CollectionSpec for hello_world_bpf.
func loadHello_world_bpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Hello_world_bpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hello_world_bpf: %w", err)
	}

	return spec, err
}

// loadHello_world_bpfObjects loads hello_world_bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hello_world_bpfObjects
//	*hello_world_bpfPrograms
//	*hello_world_bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHello_world_bpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHello_world_bpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hello_world_bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_world_bpfSpecs struct {
	hello_world_bpfProgramSpecs
	hello_world_bpfMapSpecs
}

// hello_world_bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_world_bpfProgramSpecs struct {
	Hello *ebpf.ProgramSpec `ebpf:"hello"`
}

// hello_world_bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hello_world_bpfMapSpecs struct {
}

// hello_world_bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHello_world_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_world_bpfObjects struct {
	hello_world_bpfPrograms
	hello_world_bpfMaps
}

func (o *hello_world_bpfObjects) Close() error {
	return _Hello_world_bpfClose(
		&o.hello_world_bpfPrograms,
		&o.hello_world_bpfMaps,
	)
}

// hello_world_bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHello_world_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_world_bpfMaps struct {
}

func (m *hello_world_bpfMaps) Close() error {
	return _Hello_world_bpfClose()
}

// hello_world_bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHello_world_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type hello_world_bpfPrograms struct {
	Hello *ebpf.Program `ebpf:"hello"`
}

func (p *hello_world_bpfPrograms) Close() error {
	return _Hello_world_bpfClose(
		p.Hello,
	)
}

func _Hello_world_bpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_world_bpf_bpfel.o
var _Hello_world_bpfBytes []byte
