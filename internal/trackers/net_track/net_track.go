package net_track

import (
	"bytes"
	"context"
	"encoding/binary"
	"fmt"
	"net"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	devstdout "github.com/containerscrew/devstdout/pkg"
	"github.com/containerscrew/kernelsnoop/internal/dto"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event bpf ./net_track.bpf.c -- -I../../headers

func NetworkTrack(ctx context.Context) {
	// Retrieve the context data (log and config) from the context
	contextData, _ := ctx.Value("contextData").(*dto.ContextData)
	log := contextData.Log
	config := contextData.Config

	// Load pre-compiled eBPF programs and maps into the kernel
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Error(fmt.Sprintf("Error loading eBPF objects: %v", err))
		return
	}
	defer objs.Close()

	// Conditionally attach TCP tracing if enabled in config.toml
	if config.Networking.Enable_tcp_tracing {
		linkTCP, err := link.AttachTracing(link.TracingOptions{
			Program: objs.bpfPrograms.TcpConnect,
		})
		if err != nil {
			log.Error(fmt.Sprintf("Failed to attach TCP tracing link: %v", err))
		} else {
			defer linkTCP.Close()
            log.Info("tcp tracing enabled")
		}
	}

	// Conditionally attach UDP tracing if enabled in config.toml
	if config.Networking.Enable_udp_tracing {
		linkUDP, err := link.AttachTracing(link.TracingOptions{
			Program: objs.bpfPrograms.UdpSendmsg,
		})
		if err != nil {
			log.Error(fmt.Sprintf("Failed to attach UDP tracing link: %v", err))
		} else {
			defer linkUDP.Close()
            log.Info("udp tracing enabled")
		}
	}

	// Create a ring buffer reader to receive events
	ringBufferReader, err := ringbuf.NewReader(objs.bpfMaps.Events)
	if err != nil {
		log.Error(fmt.Sprintf("Failed to create ring buffer reader: %v", err))
		return
	}
	defer ringBufferReader.Close()

	// bpfEvent is generated by bpf2go
	var event bpfEvent
	for {
		// Read an event from the ring buffer
		record, err := ringBufferReader.Read()
		if err != nil {
			log.Warning(fmt.Sprintf("Error reading from ring buffer: %v", err))
			continue
		}

		// Parse the raw event data into the bpfEvent struct
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.BigEndian, &event); err != nil {
			log.Warning(fmt.Sprintf("Error parsing ring buffer event: %v", err))
			continue
		}

		// Apply port filters for TCP/UDP based on the config
		if event.V4.Protocol == 6 && config.Networking.Enable_tcp_tracing { // TCP
			if shouldTrackPort(config.Networking.Tcp_filter_ports, event.V4.Dport) {
				log.Info("New TCP connection",
					devstdout.Argument("comm", string(event.V4.Comm[:bytes.IndexByte(event.V4.Comm[:], 0)])),
					devstdout.Argument("src_addr", intToIP(event.V4.Saddr)),
					devstdout.Argument("src_port", event.V4.Sport),
					devstdout.Argument("dst_addr", intToIP(event.V4.Daddr)),
					devstdout.Argument("dst_port", event.V4.Dport),
				)
			}
		} else if event.V4.Protocol == 17 && config.Networking.Enable_udp_tracing { // UDP
			if shouldTrackPort(config.Networking.Udp_filter_ports, event.V4.Dport) {
				log.Info("New UDP connection",
					devstdout.Argument("comm", string(event.V4.Comm[:bytes.IndexByte(event.V4.Comm[:], 0)])),
					devstdout.Argument("src_addr", intToIP(event.V4.Saddr)),
					devstdout.Argument("src_port", event.V4.Sport),
					devstdout.Argument("dst_addr", intToIP(event.V4.Daddr)),
					devstdout.Argument("dst_port", event.V4.Dport),
				)
			}
		}
	}
}

// Check if the event port is in the filter list
func shouldTrackPort(filterPorts []string, eventPort uint16) bool {
	for _, port := range filterPorts {
		if port == "" || port == fmt.Sprintf("%d", eventPort) {
			return true
		}
	}
	return false
}

// intToIP converts a 32-bit IPv4 number to net.IP
func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	binary.BigEndian.PutUint32(ip, ipNum)
	return ip
}
