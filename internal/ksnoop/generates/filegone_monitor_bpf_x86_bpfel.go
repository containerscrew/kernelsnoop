// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package generates

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadFilegone_monitor_bpf returns the embedded CollectionSpec for Filegone_monitor_bpf.
func LoadFilegone_monitor_bpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Filegone_monitor_bpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Filegone_monitor_bpf: %w", err)
	}

	return spec, err
}

// LoadFilegone_monitor_bpfObjects loads Filegone_monitor_bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Filegone_monitor_bpfObjects
//	*Filegone_monitor_bpfPrograms
//	*Filegone_monitor_bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFilegone_monitor_bpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFilegone_monitor_bpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Filegone_monitor_bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Filegone_monitor_bpfSpecs struct {
	Filegone_monitor_bpfProgramSpecs
	Filegone_monitor_bpfMapSpecs
}

// Filegone_monitor_bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Filegone_monitor_bpfProgramSpecs struct {
	TraceInodeFree *ebpf.ProgramSpec `ebpf:"trace_inode_free"`
}

// Filegone_monitor_bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Filegone_monitor_bpfMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// Filegone_monitor_bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFilegone_monitor_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type Filegone_monitor_bpfObjects struct {
	Filegone_monitor_bpfPrograms
	Filegone_monitor_bpfMaps
}

func (o *Filegone_monitor_bpfObjects) Close() error {
	return _Filegone_monitor_bpfClose(
		&o.Filegone_monitor_bpfPrograms,
		&o.Filegone_monitor_bpfMaps,
	)
}

// Filegone_monitor_bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFilegone_monitor_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type Filegone_monitor_bpfMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *Filegone_monitor_bpfMaps) Close() error {
	return _Filegone_monitor_bpfClose(
		m.Events,
	)
}

// Filegone_monitor_bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFilegone_monitor_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type Filegone_monitor_bpfPrograms struct {
	TraceInodeFree *ebpf.Program `ebpf:"trace_inode_free"`
}

func (p *Filegone_monitor_bpfPrograms) Close() error {
	return _Filegone_monitor_bpfClose(
		p.TraceInodeFree,
	)
}

func _Filegone_monitor_bpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filegone_monitor_bpf_x86_bpfel.o
var _Filegone_monitor_bpfBytes []byte
