// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package generates

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadNetwork_monitor_bpf returns the embedded CollectionSpec for Network_monitor_bpf.
func LoadNetwork_monitor_bpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Network_monitor_bpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Network_monitor_bpf: %w", err)
	}

	return spec, err
}

// LoadNetwork_monitor_bpfObjects loads Network_monitor_bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Network_monitor_bpfObjects
//	*Network_monitor_bpfPrograms
//	*Network_monitor_bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadNetwork_monitor_bpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadNetwork_monitor_bpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Network_monitor_bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Network_monitor_bpfSpecs struct {
	Network_monitor_bpfProgramSpecs
	Network_monitor_bpfMapSpecs
}

// Network_monitor_bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Network_monitor_bpfProgramSpecs struct {
	HandleSetState *ebpf.ProgramSpec `ebpf:"handle_set_state"`
}

// Network_monitor_bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Network_monitor_bpfMapSpecs struct {
	Dports     *ebpf.MapSpec `ebpf:"dports"`
	Events     *ebpf.MapSpec `ebpf:"events"`
	Sports     *ebpf.MapSpec `ebpf:"sports"`
	Timestamps *ebpf.MapSpec `ebpf:"timestamps"`
}

// Network_monitor_bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadNetwork_monitor_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type Network_monitor_bpfObjects struct {
	Network_monitor_bpfPrograms
	Network_monitor_bpfMaps
}

func (o *Network_monitor_bpfObjects) Close() error {
	return _Network_monitor_bpfClose(
		&o.Network_monitor_bpfPrograms,
		&o.Network_monitor_bpfMaps,
	)
}

// Network_monitor_bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadNetwork_monitor_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type Network_monitor_bpfMaps struct {
	Dports     *ebpf.Map `ebpf:"dports"`
	Events     *ebpf.Map `ebpf:"events"`
	Sports     *ebpf.Map `ebpf:"sports"`
	Timestamps *ebpf.Map `ebpf:"timestamps"`
}

func (m *Network_monitor_bpfMaps) Close() error {
	return _Network_monitor_bpfClose(
		m.Dports,
		m.Events,
		m.Sports,
		m.Timestamps,
	)
}

// Network_monitor_bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadNetwork_monitor_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type Network_monitor_bpfPrograms struct {
	HandleSetState *ebpf.Program `ebpf:"handle_set_state"`
}

func (p *Network_monitor_bpfPrograms) Close() error {
	return _Network_monitor_bpfClose(
		p.HandleSetState,
	)
}

func _Network_monitor_bpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed network_monitor_bpf_x86_bpfel.o
var _Network_monitor_bpfBytes []byte
