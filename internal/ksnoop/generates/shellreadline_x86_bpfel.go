// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package generates

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ShellReadlineEvent struct {
	Pid   uint32
	Uid   uint32
	Line  [80]uint8
	Shell [16]uint8
}

// LoadShellReadline returns the embedded CollectionSpec for ShellReadline.
func LoadShellReadline() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ShellReadlineBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ShellReadline: %w", err)
	}

	return spec, err
}

// LoadShellReadlineObjects loads ShellReadline and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ShellReadlineObjects
//	*ShellReadlinePrograms
//	*ShellReadlineMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadShellReadlineObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadShellReadline()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ShellReadlineSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ShellReadlineSpecs struct {
	ShellReadlineProgramSpecs
	ShellReadlineMapSpecs
}

// ShellReadlineSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ShellReadlineProgramSpecs struct {
	UretprobeShReadline  *ebpf.ProgramSpec `ebpf:"uretprobe_sh_readline"`
	UretprobeZshReadline *ebpf.ProgramSpec `ebpf:"uretprobe_zsh_readline"`
}

// ShellReadlineMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ShellReadlineMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// ShellReadlineObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadShellReadlineObjects or ebpf.CollectionSpec.LoadAndAssign.
type ShellReadlineObjects struct {
	ShellReadlinePrograms
	ShellReadlineMaps
}

func (o *ShellReadlineObjects) Close() error {
	return _ShellReadlineClose(
		&o.ShellReadlinePrograms,
		&o.ShellReadlineMaps,
	)
}

// ShellReadlineMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadShellReadlineObjects or ebpf.CollectionSpec.LoadAndAssign.
type ShellReadlineMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *ShellReadlineMaps) Close() error {
	return _ShellReadlineClose(
		m.Events,
	)
}

// ShellReadlinePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadShellReadlineObjects or ebpf.CollectionSpec.LoadAndAssign.
type ShellReadlinePrograms struct {
	UretprobeShReadline  *ebpf.Program `ebpf:"uretprobe_sh_readline"`
	UretprobeZshReadline *ebpf.Program `ebpf:"uretprobe_zsh_readline"`
}

func (p *ShellReadlinePrograms) Close() error {
	return _ShellReadlineClose(
		p.UretprobeShReadline,
		p.UretprobeZshReadline,
	)
}

func _ShellReadlineClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed shellreadline_x86_bpfel.o
var _ShellReadlineBytes []byte
