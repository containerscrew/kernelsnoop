// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package generates

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type TcpConnectEvent struct {
	Comm  [16]uint8
	Sport uint16
	Dport uint16
	Saddr uint32
	Daddr uint32
}

// LoadTcpConnect returns the embedded CollectionSpec for TcpConnect.
func LoadTcpConnect() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcpConnectBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load TcpConnect: %w", err)
	}

	return spec, err
}

// LoadTcpConnectObjects loads TcpConnect and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TcpConnectObjects
//	*TcpConnectPrograms
//	*TcpConnectMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTcpConnectObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTcpConnect()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TcpConnectSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcpConnectSpecs struct {
	TcpConnectProgramSpecs
	TcpConnectMapSpecs
}

// TcpConnectSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcpConnectProgramSpecs struct {
	TcpConnect *ebpf.ProgramSpec `ebpf:"tcp_connect"`
}

// TcpConnectMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcpConnectMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// TcpConnectObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTcpConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcpConnectObjects struct {
	TcpConnectPrograms
	TcpConnectMaps
}

func (o *TcpConnectObjects) Close() error {
	return _TcpConnectClose(
		&o.TcpConnectPrograms,
		&o.TcpConnectMaps,
	)
}

// TcpConnectMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTcpConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcpConnectMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *TcpConnectMaps) Close() error {
	return _TcpConnectClose(
		m.Events,
	)
}

// TcpConnectPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTcpConnectObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcpConnectPrograms struct {
	TcpConnect *ebpf.Program `ebpf:"tcp_connect"`
}

func (p *TcpConnectPrograms) Close() error {
	return _TcpConnectClose(
		p.TcpConnect,
	)
}

func _TcpConnectClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpconnect_x86_bpfel.o
var _TcpConnectBytes []byte
