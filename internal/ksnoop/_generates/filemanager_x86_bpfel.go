// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package generates

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type FileManagerEvent struct {
	Pid      uint32
	Uid      uint32
	Filename [80]uint8
}

// LoadFileManager returns the embedded CollectionSpec for FileManager.
func LoadFileManager() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FileManagerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load FileManager: %w", err)
	}

	return spec, err
}

// LoadFileManagerObjects loads FileManager and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*FileManagerObjects
//	*FileManagerPrograms
//	*FileManagerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFileManagerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFileManager()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// FileManagerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FileManagerSpecs struct {
	FileManagerProgramSpecs
	FileManagerMapSpecs
}

// FileManagerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FileManagerProgramSpecs struct {
	KprobeDoUnlinkat *ebpf.ProgramSpec `ebpf:"kprobe__do_unlinkat"`
}

// FileManagerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FileManagerMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// FileManagerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFileManagerObjects or ebpf.CollectionSpec.LoadAndAssign.
type FileManagerObjects struct {
	FileManagerPrograms
	FileManagerMaps
}

func (o *FileManagerObjects) Close() error {
	return _FileManagerClose(
		&o.FileManagerPrograms,
		&o.FileManagerMaps,
	)
}

// FileManagerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFileManagerObjects or ebpf.CollectionSpec.LoadAndAssign.
type FileManagerMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *FileManagerMaps) Close() error {
	return _FileManagerClose(
		m.Events,
	)
}

// FileManagerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFileManagerObjects or ebpf.CollectionSpec.LoadAndAssign.
type FileManagerPrograms struct {
	KprobeDoUnlinkat *ebpf.Program `ebpf:"kprobe__do_unlinkat"`
}

func (p *FileManagerPrograms) Close() error {
	return _FileManagerClose(
		p.KprobeDoUnlinkat,
	)
}

func _FileManagerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filemanager_x86_bpfel.o
var _FileManagerBytes []byte
