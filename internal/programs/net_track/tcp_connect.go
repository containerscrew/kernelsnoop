package net_track

import (
	"bytes"
	"context"
	"encoding/binary"
	"errors"
	"fmt"
	"net"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	devstdout "github.com/containerscrew/devstdout/pkg"
	"github.com/containerscrew/kernelsnoop/internal/ipchecker"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event bpf ./tcp_connect.bpf.c -- -I../../headers

func NetworkTrack(ctx context.Context) {
	// Retrieve the devstdout from the context
	log, _ := ctx.Value("log").(*devstdout.CustomLogger)

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Error(fmt.Sprintf("loading objects: %v", err))
	}
	defer objs.Close()

	link, err := link.AttachTracing(link.TracingOptions{
		Program: objs.bpfPrograms.TcpConnect,
	})
	if err != nil {
		log.Error(fmt.Sprintf("failed to attach kprobe link: %v", err))
	}
	defer link.Close()

	rd, err := ringbuf.NewReader(objs.bpfMaps.Events)
	if err != nil {
		log.Error(fmt.Sprintf("failed to create ring buffer reader: %v", err))
	}
	defer rd.Close()

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Warning("received signal, closing ringbuf reader..")
				return
			}
			log.Info("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.BigEndian, &event); err != nil {
			log.Warning("parsing ringbuf event: %s", err)
			continue
		}

		var hostInfo ipchecker.GeoLocation

		// Get IP geolocation info
		if ipchecker.PrivateIPCheck(intToIP(event.Daddr).String()) {
			log.Warning("private address will not be geolocated")
			continue
		} else {
			hostInfo, err = ipchecker.GetIPInfo(intToIP(event.Daddr).String())
			if err != nil {
				log.Error("error getting IP geolocation",
				devstdout.Argument("error", err),
				devstdout.Argument("ip", intToIP(event.Daddr).String()),
			)
			}
		}

		// virustotalInfo, err := utils.GetVirusTotalInfo(intToIP(event.Daddr).String())
		// if err != nil {
		// 	log.Debug("error getting VirusTotal info: %s", err)
		// }

		log.Info("new connection",
			devstdout.Argument("comm", string(event.Comm[:bytes.IndexByte(event.Comm[:], 0)])),
			devstdout.Argument("src_addr", intToIP(event.Saddr)),
			devstdout.Argument("src_port", event.Sport),
			devstdout.Argument("dst_addr", intToIP(event.Daddr)),
			devstdout.Argument("dst_port", event.Dport),
			devstdout.Argument("host", hostInfo.As),
			devstdout.Argument("country", hostInfo.Country),
			devstdout.Argument("latitude", hostInfo.Lat),
			devstdout.Argument("longitude", hostInfo.Lon),
			// devstdout.Argument("virustotal", virustotalInfo),
		)
	}
}

// intToIP converts IPv4 number to net.IP
func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	binary.BigEndian.PutUint32(ip, ipNum)
	return ip
}
